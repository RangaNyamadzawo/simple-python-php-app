name: Deploy to AWS

on:
  push:
    branches:
      - '**'               # any branch
  pull_request:
    branches: [ main ]
    types: [ closed ]      # optional: deploy on merge
  workflow_dispatch:        # manual trigger

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1
  APPLICATION_NAME: zse-doc-reviewer
  ENV_NAME: zse-doc-reviewer-prod

jobs:
  # ----------------------------
  # 1) LINT & SECURITY SCAN
  # ----------------------------
  lint:
    runs-on: ubuntu-latest
    continue-on-error: true   # ðŸ‘ˆ workflow continues even if lint fails
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # get full history so origin/<default> exists

      - name: Ensure default branch is available
        run: |
          git fetch origin "${{ github.event.repository.default_branch }}:${{ github.event.repository.default_branch }}"

      - name: Super-Linter
        uses: super-linter/super-linter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Dynamically use the repo's real default branch (main/master/etc.)
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          VALIDATE_ALL_CODEBASE: true

  # ----------------------------
  # 2) BUILD & UPLOAD TO S3
  # ----------------------------
  build:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment variables
        run: |
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET }}" >> $GITHUB_ENV
          echo "VERSION_LABEL=${{ github.sha }}" >> $GITHUB_ENV
          echo "APPLICATION_NAME=${{ env.APPLICATION_NAME }}" >> $GITHUB_ENV
          echo "ENV_NAME=${{ env.ENV_NAME }}" >> $GITHUB_ENV

      - name: Create deployment package
        run: |
          zip -r deploy.zip . -x "*.git*" "README.md" "*.md"

      - name: Upload to S3
        run: |
          aws s3 cp deploy.zip s3://$S3_BUCKET_NAME/deployments/$VERSION_LABEL.zip

  # ----------------------------
  # 3) DEPLOY TO ELASTIC BEANSTALK
  # ----------------------------
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment variables
        run: |
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET }}" >> $GITHUB_ENV
          echo "VERSION_LABEL=${{ github.sha }}" >> $GITHUB_ENV
          echo "APPLICATION_NAME=${{ env.APPLICATION_NAME }}" >> $GITHUB_ENV
          echo "ENV_NAME=${{ env.ENV_NAME }}" >> $GITHUB_ENV

      - name: Ensure EB application exists (no-op if it does)
        run: |
          if ! aws elasticbeanstalk describe-applications \
            --query "Applications[?ApplicationName=='$APPLICATION_NAME']|[0]" \
            --output text | grep -q .; then
            aws elasticbeanstalk create-application --application-name "$APPLICATION_NAME"
          fi

      - name: Create application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name "$APPLICATION_NAME" \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket="$S3_BUCKET_NAME",S3Key="deployments/$VERSION_LABEL.zip"

      - name: Deploy to environment
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "$ENV_NAME" \
            --version-label "$VERSION_LABEL" \
            --option-settings Namespace=aws:elasticbeanstalk:environment,OptionName=ServiceRole,Value=aws-elasticbeanstalk-service-role

      - name: Wait for deployment
        run: |
          aws elasticbeanstalk wait environment-updated \
            --environment-name "$ENV_NAME"
